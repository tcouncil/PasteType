{"version":3,"sources":["TextArea.jsx","PasteType.jsx","duration.js","Stats.jsx","App.js","reportWebVitals.js","index.js"],"names":["TextArea","handleText","ready","className","id","placeholder","readOnly","onChange","onClick","PasteType","pastedText","setReady","setKeystrokes","readyTyper","setLengthKeys","setTime","textTyper","document","getElementById","typedText","pasteText","e","length","trim","classList","add","querySelector","value","innerText","textArea","remove","secondsToDuration","givenSeconds","minutes","Math","floor","toString","padStart","seconds","round","Stats","startedTyping","keystrokes","accurateKeystrokes","typingStats","lengthKeys","toFixed","title","spaceMode","firstSpace","App","useState","setPastedText","readyStats","setReadyStats","setTypingStats","setAccurateKeystrokes","count","setCount","useInterval","useEffect","window","addEventListener","key","theChar","keystroke","textTyped","undefined","charCodeAt","nextChar","slice","textTypedArr","split","shift","join","keyHandler","target","bool","pasteTypeTexter","href","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.55d90d69.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function TextArea({ handleText, ready }) {\r\n  return (\r\n    <div className=\"row\" id=\"PastedText\">\r\n      <textarea\r\n        className=\"pasted\"\r\n        placeholder=\"Paste Text Here\"\r\n        readOnly={ready}\r\n        onChange={handleText}\r\n        onClick={handleText}\r\n      ></textarea>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./pasteType.css\";\r\n\r\nexport default function PasteType({ pastedText = \"\", setReady, readyTyper, setKeystrokes, setLengthKeys, setTime }) {\r\n  const textTyper = document.getElementById(\"TextTyper\");\r\n  const typedText = document.getElementById(\"TextTyped\");\r\n  let pasteText = pastedText;\r\n\r\n  const handleReset = (e) => {\r\n    const textArea = document.querySelector(\".pasted\");\r\n    document.getElementById(\"ReadyButton\").classList.remove(\"end\");\r\n    document.getElementById(\"StartTyping\").classList.remove(\"end\");\r\n    document.querySelector(\"body\").classList.remove(\"PlayingBody\");\r\n    setTime(0);\r\n    setKeystrokes(0);\r\n    setLengthKeys(0);\r\n    setReady(false);\r\n    if (textTyper) {\r\n      pasteText = \"\";\r\n      textArea.value = \"\";\r\n      textTyper.innerText = \"\";\r\n      typedText.innerText = \"\";\r\n    }\r\n    document.getElementById(\"PasteTypeTexter\").classList.add('end')\r\n    document.getElementById('PastedText').classList.remove('end');\r\n  };\r\n\r\n  const handleReady = (e) => {\r\n    setReady(true);\r\n    setKeystrokes(0);\r\n    setLengthKeys(length => length = pastedText.trim().length);\r\n    document.getElementById(\"ReadyButton\").classList.add(\"end\");\r\n    document.querySelector(\"body\").classList.add(\"PlayingBody\");\r\n    if (document.querySelector(\".pasted\").value.length === 0) {\r\n      const theChar = document.getElementById(\"TheChar\");\r\n      theChar.innerText = \"i\";\r\n      document.getElementById(\"TextTyper\").innerText = \"nput text!\";\r\n      setLengthKeys(length => length = 11);\r\n    }\r\n    document.getElementById('PastedText').classList.add('end');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"row\" id=\"PasteTypeTexter\">\r\n        <div id=\"TypedText\">\r\n          <code className=\"col\" id=\"TextTyped\" />\r\n          \r\n            <code id=\"TheChar\" />\r\n  \r\n          <code className=\"col\" id=\"TextTyper\">\r\n            {pasteText}\r\n          </code>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <button id=\"ReadyButton\" className=\"btn col\" onClick={handleReady}>\r\n          Ready\r\n        </button>\r\n        <button id=\"ResetButton\" className=\"btn col\" onClick={handleReset}>\r\n          Reset\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","/**\r\n * Formats a number of minutes as 'mm:00'.\r\n *\r\n * For example,\r\n *    minutesToDuration(3) = '03:00'\r\n *    minutesToDuration(45) = '45:00'\r\n *\r\n * @param givenMinutes\r\n *    the number of minutes in the duration\r\n * @returns {string}\r\n *    the given minutes formatted as 'mm:00'\r\n */\r\n\r\nexport function minutesToDuration(givenMinutes) {\r\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\r\n  return `${minutes}:00`;\r\n}\r\n\r\n/**\r\n * Formats a number of seconds as 'mm:ss'.\r\n *\r\n * For example,\r\n *    secondsToDuration(305) = '05:05'\r\n *    secondsToDuration(930) = '15:30'\r\n *\r\n * @param givenSeconds\r\n *    the number of seconds in the duration\r\n * @returns {string}\r\n *    the given seconds formatted as 'mm:ss'\r\n */\r\n\r\nexport function secondsToDuration(givenSeconds) {\r\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\r\n    .toString()\r\n    .padStart(2, \"0\");\r\n  const seconds = Math.round(givenSeconds % 60)\r\n    .toString()\r\n    .padStart(2, \"0\");\r\n  return `${minutes}:${seconds}`;\r\n}\r\n","import React from \"react\";\r\nimport { secondsToDuration } from \"./duration\";\r\n\r\nexport default function Stats({startedTyping, ready, accurateKeystrokes, keystrokes, typingStats, lengthKeys, seconds}) {\r\n  return (\r\n    <div className=\"row text-center\" id=\"Stats\">\r\n      <h4 className=\"mt-2\" id=\"StartTyping\">{ready && !startedTyping ? \"Start Typing!\" : \"\" }</h4>\r\n      <h5 className=\"mt-\"> {ready ? `🕑 ${secondsToDuration(seconds)}` : \"\"}</h5>\r\n      <h5>{typingStats ? `${100-((keystrokes/lengthKeys*100)-100).toFixed(2)}% Accuracy` : \"\" }</h5>\r\n      <h5>{typingStats ? `${ seconds > 0 ? (keystrokes/(seconds/60)).toFixed(0) :  (keystrokes*60).toFixed(0) } ` : \"\" }<abbr title=\"Characters Per Minute\">{typingStats ? \"CPM\" : \"\"}</abbr></h5>\r\n    </div>\r\n  );\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport TextArea from \"./TextArea\";\r\nimport PasteType from \"./PasteType\";\r\nimport Stats from \"./Stats\";\r\nimport useInterval from 'react-useinterval';\r\n\r\nlet ready = false;\r\nlet startedTyping = false;\r\nlet spaceMode = false;\r\nlet firstSpace = true;\r\nlet pasteText = \"\";\r\n\r\nfunction App() {\r\n  const [pastedText, setPastedText] = useState(\"\");\r\n  const [readyStats, setReadyStats] = useState(false);\r\n  const [typingStats, setTypingStats] = useState(false);\r\n  const [keystrokes, setKeystrokes] = useState(0);\r\n  const [accurateKeystrokes, setAccurateKeystrokes] = useState(0);\r\n  const [lengthKeys, setLengthKeys] = useState(0);\r\n  let [count, setCount] = useState(0);\r\n    const increaseCount = () => {\r\n      if(startedTyping && !typingStats)\r\n        setCount(count+1);\r\n    };\r\n     useInterval(increaseCount, 1000, 5);\r\n  const handleText = (e) => setPastedText(e.target.value);\r\n  const setReady = (bool = false) => {\r\n    const textArea = document.querySelector(\".pasted\");\r\n    const textTyper = document.getElementById(\"TextTyper\");\r\n    const theChar = document.getElementById(\"TheChar\");\r\n    const pasteTypeTexter = document.getElementById(\"PasteTypeTexter\");\r\n    pasteTypeTexter.classList.remove(\"end\");\r\n    if (textTyper.innerText[1] === \" \") {\r\n      spaceMode = true;\r\n      textTyper.classList.add(\"SpaceLeft\");\r\n    }\r\n    startedTyping = false;\r\n    spaceMode = false;\r\n    theChar.classList.remove(\"Space\");\r\n    ready = bool;\r\n    setLengthKeys(pastedText.length);\r\n    setReadyStats(bool);\r\n    if (bool) {\r\n      textArea.classList.add(\"Ready\");\r\n      theChar.innerText = textTyper.innerText[0];\r\n      textTyper.innerText = textTyper.innerText.slice(1);\r\n    } else {\r\n      pasteTypeTexter.classList.remove(\"end\");\r\n      textArea.classList.remove(\"Ready\");\r\n      theChar.classList.remove(\"end\");\r\n      theChar.innerText = \"\";\r\n      document.getElementById(\"PasteTypeTexter\").classList.remove(\"Over\");\r\n    }\r\n    if (!startedTyping) {\r\n      pasteText = pastedText;\r\n      setTypingStats(false);\r\n      setKeystrokes(0);\r\n      setAccurateKeystrokes(0);\r\n      setLengthKeys(pasteText.length);\r\n    }\r\n  };\r\n\r\n  const keyHandler = ({ key }) => {\r\n    const theChar = document.getElementById(\"TheChar\");\r\n\r\n    if (theChar.innerText === \"end.\") {\r\n        setTypingStats(true);\r\n        startedTyping = false;\r\n    }\r\n\r\n    if (!startedTyping) {\r\n        startedTyping = true;\r\n        document.getElementById(\"StartTyping\").classList.add(\"end\");\r\n    }\r\n\r\n    if (\r\n        key !== \"Shift\" &&\r\n        key !== \"Alt\" &&\r\n        key !== \"Control\" &&\r\n        key !== \"F1\" &&\r\n        key !== \"F2\" &&\r\n        key !== \"F3\" &&\r\n        key !== \"F4\" &&\r\n        key !== \"F5\" &&\r\n        key !== \"F6\" &&\r\n        key !== \"F7\" &&\r\n        key !== \"F8\" &&\r\n        key !== \"F9\" &&\r\n        key !== \"F10\" &&\r\n        key !== \"F11\" &&\r\n        key !== \"F12\" &&\r\n        key !== \"CapsLock\" &&\r\n        key !== \"BackSpace\"\r\n    ) {\r\n        if (theChar.innerText !== \"end.\")\r\n            setKeystrokes((keystroke) => keystroke + 1);\r\n    }\r\n\r\n    const textTyper = document.getElementById(\"TextTyper\");\r\n    const textTyped = document.getElementById(\"TextTyped\");\r\n    if (!startedTyping) {\r\n        startedTyping = true;\r\n        document.getElementById(\"StartTyping\").classList.add(\"end\");\r\n    }\r\n\r\n    if (\r\n        textTyper.innerText[0] === undefined &&\r\n        key.charCodeAt(0) === theChar.innerText.charCodeAt(0)\r\n    ) {\r\n        theChar.innerText = \"end.\";\r\n        theChar.classList.add(\"end\");\r\n        document.getElementById(\"PasteTypeTexter\").classList.add(\"Over\");\r\n        setTypingStats(true);\r\n        startedTyping = false;\r\n\r\n        return;\r\n    }\r\n    if (spaceMode) {\r\n        if (\r\n            firstSpace &&\r\n            key.charCodeAt(0) === theChar.innerText.charCodeAt(0)\r\n        ) {\r\n            textTyped.innerText += theChar.innerText;\r\n            theChar.innerText = \"_\";\r\n            theChar.classList.add(\"Space\");\r\n            textTyper.classList.remove(\"SpaceLeft\");\r\n            textTyped.classList.remove(\"SpaceRight\");\r\n            firstSpace = false;\r\n        }\r\n        if (key.charCodeAt(0) === 32 && theChar.innerText === \"_\") {\r\n            theChar.classList.remove(\"Space\");\r\n            textTyped.classList.add(\"SpaceRight\");\r\n            theChar.innerText = textTyper.innerText[0];\r\n            let nextChar = textTyper.innerText[1];\r\n            spaceMode = false;\r\n            firstSpace = true;\r\n            if (nextChar === \" \") {\r\n                spaceMode = true;\r\n                theChar.innerText = textTyper.innerText[0];\r\n                textTyper.classList.add(\"SpaceLeft\");\r\n            }\r\n            textTyper.innerText = textTyper.innerText.slice(1);\r\n        }\r\n        if (textTyped.innerText.length >= 11) {\r\n            const textTypedArr = textTyped.innerText.split(\"\");\r\n            textTypedArr.shift();\r\n            textTyped.innerText = textTypedArr.join(\"\");\r\n        }\r\n    } else {\r\n        if (key.charCodeAt(0) === theChar.innerText.charCodeAt(0)) {\r\n            textTyped.classList.remove(\"SpaceRight\");\r\n            let nextChar = textTyper.innerText[1];\r\n            textTyped.innerText += theChar.innerText;\r\n            if (nextChar === \" \") {\r\n                spaceMode = true;\r\n                theChar.innerText = textTyper.innerText[0];\r\n                textTyper.classList.add(\"SpaceLeft\");\r\n            } else {\r\n                theChar.innerText = textTyper.innerText[0];\r\n            }\r\n            textTyper.innerText = textTyper.innerText.slice(1);\r\n\r\n            if (theChar === undefined) theChar.innerText = \"\";\r\n            if (textTyped.innerText.length >= 11) {\r\n                const textTypedArr = textTyped.innerText.split(\"\");\r\n                textTypedArr.shift();\r\n                textTyped.innerText = textTypedArr.join(\"\");\r\n            }\r\n        }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.getElementById(\"PasteTypeTexter\").classList.add('end')\r\n    window.addEventListener(\"keydown\", (e) => {\r\n      if (ready) {\r\n        keyHandler(e);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <header className=\"text-center\">\r\n          <h1>p<u>asteT</u>yp<u>e</u></h1>\r\n        </header>\r\n      </div>\r\n      <TextArea handleText={handleText} ready={ready} />\r\n      <PasteType\r\n        readyTyper={readyStats}\r\n        setReady={setReady}\r\n        pastedText={pastedText}\r\n        setKeystrokes={setKeystrokes}\r\n        setLengthKeys={setLengthKeys}\r\n        setTime={setCount}\r\n      />\r\n      <Stats\r\n        startedTyping={typingStats}\r\n        ready={readyStats}\r\n        keystrokes={keystrokes}\r\n        accurateKeystrokes={accurateKeystrokes}\r\n        lengthKeys={lengthKeys}\r\n        typingStats={typingStats}\r\n        seconds={count}\r\n      />\r\n      <footer className=\"text-center\"><a className=\"btn\" id=\"tcouncil\" href=\"https://tcouncil.dev/\" target=\"_blank\" rel=\"noreferrer\">2021 • Travis Council</a></footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}